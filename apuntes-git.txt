/*-------Apuntes de comandos para aprender Git------*/

/*-----Comandos para inicializar proyectos en Git-----*/
 En Consola GIT BASH: 
- git init (para inicializar una carpeta en git)
- git remote add origin https://github.com/ejemplo/ejemplo (copiar link https de clone)
- git remote -v (para ver si esta conectado correctamente al repositorio)
- git remote rm origin (eliminar origen viejo)

/*-----Comandos para subir cambios a git-----*/ 
- git status (ver estado de los archivos del proyecto)
- git add . (agregar todos los archivos en el proyecto al repositorio)
- git add archivo.css (adjuntar archivo especifico)
- git commit -m "mensaje" (subir un cambio con mensaje)
- git push origin Nombrerama (enviar al repositorio los cambios hechos localmente)
- git pull origin Nombrerama (traer cambios de la rama)

/*-----Comandos para borrar y/o volver commits atras-----*/
- git reset idcommit --hard (se borra todo el historial y los registros de Git pero guardamos los cambios que tengamos en staging, así podemos aplicar las últimas actualizaciones a un nuevo commit)
- git reset idcommit --soft (se borra todo. Toda la información de los commits y del área de staging se borra del historial)
- git commit -am (agrega los archivos al repositorio pero solo funciona con los archivos a los que se le ha hecho "git add" previamente)
- git rm --catched (elimina los archivos de nuestro repositorio local y del área de staging, pero los mantiene en nuestro disco duro)
- git rm --force (elimina los archivos de Git y del disco duro)

/*-----Comandos para crear ramas o moverse entre ramas-----*/
- git branch Nombrerama (para crear una rama)
- git branch -l (para listar todas las ramas que existen)
- git branch -d Nombrerama (elimina la rama, y con -d se fuerza la peticion de borrar)
- git branch -m Nombrerama Ramanueva (para renombrar la rama "Nombrerama" por "Ramanueva")
- git checkout Nombrerama (para cambiarte de rama)
- git checkout -b Nombrerama (crea una rama llamada "Nombrerama" y se posiciona en ella)
- git fetch (para cargar las ramas creadas recientemente)

/*-----Comandos para unir ramas-----*/
- git merge Nombrerama (para unir 2 ramas)
- git merge --abort (para revertir un merge)

/*-----Comandos varios-----*/
- git status (para ver el estado de la rama)
- git show (para ver todos los cambios hechos)
- git show idcommit (nos muestra los cambios realizados en ese commit especifico mediante su id)
- git log (para ver el historial de commits)
- git diff (diferencias entre un cambio y el cambio anterior)
- cat archivo.txt (para ver el contenido del archivo)
- code archivo.txt (para abrir el archivo en el editor de codigo)
- git config -l (permite ver los parametros de la configuracion y sus valores)
- git config -global user.mail "ejemplo@mail.com" (permite modificar el valor de user.mail en la configuracion)
- git show-branch (muestra cuales son las ramas que existen y cual es su historia)
- git show-branch --all (muestra cuales son las ramas que existen y cual es su historia)


/*-----Comandos tags-----*/
- git tag -a Nombretag idcommit (para crear un nuevo tag y asignarlo a un commit)
- git tag -d Nombretag (borrar un tag en el repositorio local)
- git show-ref --tags (para listar los tags de nuestro repositorio)
- git tag (para listar los tags de nuestro repositorio)
- git push origin --tags (para subir un tag a nuestro repositorio)
- git tag -d Nombretag (paso 1 para borrar un tag del repositorio)
- git push origin :refs/tags/Nombretag. (paso 2 para borrar un tag del repositorio)

/*-----Comandos git log-----*/
- git log --oneline (te muestra el id commit y el título del commit)
- git log --decorate (te muestra donde se encuentra el head point en el log)
- git log --stat (explica el número de líneas que se cambiaron brevemente)
- git log -p (explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido)
- git shortlog (indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits)
- git log -3 (limitamos el número de commits)
- git log --after=“2018-1-2” (commits para localizar por fechas)
- git log --after=“today” (commits para localizar por fechas)
- git log --after=“2018-1-2” --before=“today” (commits para localizar por fechas)
- git log --grep=“INVIE” (busca los commits que cumplan tal cual está escrito entre las comillas)
- git log --grep=“INVIE” –i (busca los commits que cumplan sin importar mayúsculas o minúsculas)
- git log – index.html (busca los commits en un archivo en específico)
- git log -S “Por contenido” (buscar los commits con el contenido dentro del archivo)
- git log > log.txt (guardar los logs en un archivo txt)
- git log --all --graph (para visualizar el arbol de git)
- git log --all --graph --decorate --oneline (visualiza el arbol de git mas comprimido)

/*-----Comandos terminal-----*/
- cd / (para ir al home o carpeta principal o raiz del disco duro)
- pwd (para ver la ruta donde estas parado)
- ls (para ver todas las carpetas)
- ls -al (para listar todos los archivos incluyendo los ocultos)
- ls -l (para listar todos los archivos excepto los ocultos)
- ctrl + l (para limpiar la terminal o consola)
- cat archivo.txt (para ver el contenido del archivo)
- rm archivo.txt (para borrar archivos, si se hace mal se puede borrar el disco duro)
- gitk (se abre el historial de ramas en una ventana similar a fork)

/*-----Comando ara crear la llave SSH-----*/
- ssh-keygen -t rsa -b 4096 -C  "ejemplo@mail.com" (para generar la llave ssh publica y privada)
- eval $(ssh-agent -s) (para consultar si el servidor de ssh esta funcionando)
- ssh-add ~/.ssh/id_rsa (para añadir la llave privada al sistema)
- git remote set-url origin ssh-url (para conectar git con el repositorio mediante ssh, ssh-url seria la ruta ssh del repositorio)